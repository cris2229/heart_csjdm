@implements IDisposable

@inject NavigationManager NavigationManager

<div class="nav-scrollable">
    <nav class="flex-row nav-horizontal">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="About">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> About
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="ScanQR">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Scan QR
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="Admin/Clients">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Clients
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <form action="Account/Logout" method="post">
                <AntiforgeryToken />
                <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                <button type="submit" class="nav-link">
                    <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                </button>
            </form>
        </div>

    </nav>
</div>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
            NavigationManager.LocationChanged += OnLocationChanged;
        
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

